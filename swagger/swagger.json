{
  "swagger": "2.0",
  "info": {
    "description": "Welcome to my Portflio Creation app. This is a swagger documentation for Portolio Creation Project. You can also use Postman for testing. \n\n **Note:** Front-end part of the project is not developed yet. :-) ",
    "version": "1.0.0",
    "title": "Swagger Portfolio Creation",
    "contact": {
      "email": "kalpantumdi@gmail.com"
    }
  },
  "host": "https://portfolio-app-kt.herokuapp.com",
  "basePath": "/",
  "tags": [
    {
      "name": "trade",
      "description": "Everything about your Trades"
    },
    {
      "name": "holdings",
      "description": "Check your Holdings"
    },
    {
      "name": "returns",
      "description": "Check your Returns"
    }
  ],
  "schemes": [
    "https",
    "http"
  ],
  "paths": {
    "/trades": {
      "get": {
        "tags": [
          "trade"
        ],
        "description": "Fetch all the trades and their details",
        "summary": "Get Trades",
        "responses": {
          "200": {
            "description": "Trades fetched Successfully"
          },
          "403": {
            "description": "Invalid input. Validation condition not satisfied."
          }
        }
      },
      "post": {
        "tags": [
          "trade"
        ],
        "summary": "Add a new trade in the portfolio",
        "description": "Used for buying and adding a new trade in Portfolio",
        "operationId": "addTrade",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Trade json object for addition in Portfolio",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Trade"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Trade added Successfully.."
          },
          "402": {
            "description": "Database Operation Error"
          },
          "403": {
            "description": "Invalid input. Validation condition not satisfied."
          }
        }
      },
      "delete": {
        "tags": [
          "trade"
        ],
        "description": "Delete all the trades and reset DB",
        "summary": "Delete Trades",
        "responses": {
          "200": {
            "description": "Trade added Successfully.."
          },
          "402": {
            "description": "Database Operation Error"
          },
          "403": {
            "description": "Invalid input. Validation condition not satisfied."
          }
        }
      }
    },
    "/trade/{tradeID}": {
      "get": {
        "tags": [
          "trade"
        ],
        "description": "Fetch trade with given tradeID",
        "summary": "Get Trade",
        "parameters": [
          {
            "name": "tradeID",
            "in": "path",
            "description": "Trade ID of the trade. Get if from GET /trades",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Trade added Successfully.."
          },
          "402": {
            "description": "Database Operation Error"
          },
          "403": {
            "description": "Invalid input. Validation condition not satisfied."
          }
        }
      },
      "put": {
        "tags": [
          "trade"
        ],
        "summary": "Update Trade",
        "description": "**3** Update operations are available. \n 1. Change Ticker \n 2. Change Operation(buy/sell) \n 3. Change number of shares. \n\n **Limitation** : Only **1** operation at a time can be performed. \n Hence, you can only provide 1 parameter out of `operation` ,`numShares`,`ticker` at a time",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tradeID",
            "in": "path",
            "description": "Trade ID of the trade to be updated. Get if from GET /trades",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Trade json object for updation in Portfolio. \n **Note:** Only one operation can be performed at a time.\nProvide `buyPrice` as well while changing **sell** `operation` to **buy** or **buy** `operation` to **sell** ",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateTrade"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Trade added Successfully.."
          },
          "402": {
            "description": "Database Operation Error"
          },
          "403": {
            "description": "Invalid input. Validation condition not satisfied."
          }
        }
      },
      "delete": {
        "tags": [
          "trade"
        ],
        "summary": "Delete Trade",
        "description": "Delete a trade from Portfolio",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tradeID",
            "in": "path",
            "description": "Trade ID of the trade to be deleted. Get if from GET /trades",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Trade added Successfully.."
          },
          "402": {
            "description": "Database Operation Error"
          },
          "403": {
            "description": "Invalid input. Validation condition not satisfied."
          }
        }
      }
    },
    "/holdings": {
      "get": {
        "tags": [
          "holdings"
        ],
        "description": "Fetch all the trades and their details",
        "summary": "Get Holdings",
        "responses": {
          "200": {
            "description": "Trade added Successfully.."
          },
          "402": {
            "description": "Database Operation Error"
          },
          "403": {
            "description": "Invalid input. Validation condition not satisfied."
          }
        }
      }
    },
    "/returns": {
      "get": {
        "tags": [
          "returns"
        ],
        "description": "Fetch returns value",
        "summary": "Get Returns",
        "responses": {
          "200": {
            "description": "Trade added Successfully.."
          },
          "402": {
            "description": "Database Operation Error"
          },
          "403": {
            "description": "Invalid input. Validation condition not satisfied."
          }
        }
      }
    }
  },
  "definitions": {
    "Trade": {
      "type": "object",
      "required": [
        "ticker",
        "buyPrice",
        "numShares"
      ],
      "properties": {
        "ticker": {
          "type": "string",
          "example": "TCS",
          "description": "Ticker of the Trade"
        },
        "buyPrice": {
          "type": "number",
          "example": 100,
          "description": "Buying Price of shares"
        },
        "numShares": {
          "type": "integer",
          "example": 1,
          "description": "No. of Shares"
        },
        "name": {
          "type": "string",
          "example": "Tata Consultancy Services",
          "description": "Name of the company"
        },
        "operation": {
          "type": "string",
          "example": "buy",
          "description": "Operation to be performed while updating. (Buy, Sell, Change)",
          "enum": [
            "buy",
            "sell"
          ]
        }
      }
    },
    "UpdateTrade": {
      "type": "object",
      "properties": {
        "numShares": {
          "type": "integer",
          "example": 1,
          "description": "No. of Shares"
        }
      }
    }
  }
}